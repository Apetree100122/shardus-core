export = Storage;
declare class Storage {
    constructor(baseDir: any, config: any, logger: any, profiler: any);
    profiler: any;
    mainLogger: any;
    storage: import("./sqlite3storage");
    stateManager: any;
    init(): Promise<void>;
    storageModels: {} | undefined;
    _create: ((table: any, values: any, opts: any) => Promise<any>) | undefined;
    _read: ((table: any, where: any, opts: any) => Promise<any>) | undefined;
    _update: ((table: any, values: any, where: any, opts: any) => Promise<any>) | undefined;
    _delete: ((table: any, where: any, opts: any) => Promise<any>) | undefined;
    _query: ((query: any, tableModel: any) => Promise<any>) | undefined;
    initialized: boolean | undefined;
    close(): Promise<void>;
    _checkInit(): void;
    addCycles(cycles: any): Promise<void>;
    getCycleByCounter(counter: any): Promise<any>;
    getCycleByMarker(marker: any): Promise<any>;
    deleteCycleByCounter(counter: any): Promise<void>;
    deleteCycleByMarker(marker: any): Promise<void>;
    listCycles(): Promise<any>;
    addNodes(nodes: any): Promise<void>;
    getNodes(node: any): Promise<any>;
    updateNodes(node: any, newNode: any): Promise<void>;
    deleteNodes(nodes: any): Promise<void>;
    listNodes(): Promise<any>;
    setProperty(key: any, value: any): Promise<void>;
    getProperty(key: any): Promise<any>;
    deleteProperty(key: any): Promise<void>;
    listProperties(): Promise<any>;
    clearP2pState(): Promise<void>;
    clearAppRelatedState(): Promise<void>;
    addAcceptedTransactions(acceptedTransactions: any): Promise<void>;
    addAccountStates(accountStates: any): Promise<void>;
    queryAcceptedTransactions(tsStart: any, tsEnd: any, limit: any): Promise<any>;
    queryAcceptedTransactionsByIds(ids: any): Promise<any>;
    queryAccountStateTable(accountStart: any, accountEnd: any, tsStart: any, tsEnd: any, limit: any): Promise<any>;
    queryAccountStateTableByList(addressList: any, tsStart: any, tsEnd: any): Promise<any>;
    clearAccountStateTableByList(addressList: any, tsStart: any, tsEnd: any): Promise<void>;
    clearAccountStateTableOlderThan(tsEnd: any): Promise<void>;
    clearAcceptedTX(tsStart: any, tsEnd: any): Promise<void>;
    searchAccountStateTable(accountId: any, txTimestamp: any): Promise<any>;
    createAccountCopies(accountCopies: any): Promise<void>;
    createOrReplaceAccountCopy(accountCopy: any): Promise<void>;
    getAccountReplacmentCopies1(accountIDs: any, cycleNumber: any): Promise<any>;
    getAccountReplacmentCopies(accountIDs: any, cycleNumber: any): Promise<any>;
    clearAccountReplacmentCopies(accountIDs: any, cycleNumber: any): Promise<void>;
}
