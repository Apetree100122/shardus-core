diff --git a/set-global-account.patch b/set-global-account.patch
new file mode 100644
index 00000000..e69de29b
diff --git a/src/config/server.ts b/src/config/server.ts
index 5ebb104b..f7c305f6 100644
--- a/src/config/server.ts
+++ b/src/config/server.ts
@@ -4,6 +4,7 @@ const SERVER_CONFIG: StrictServerConfiguration = {
   heartbeatInterval: 5,
   baseDir: '.',
   transactionExpireTime: 5,
+  globalAccount: '0'.repeat(64),
   crypto: {
     hashKey: '69fa4195670576c0160d660c3be36556ff8d504725be8a59b5a96509e0c994bc',
     keyPairConfig: {
diff --git a/src/shardus/index.ts b/src/shardus/index.ts
index 286231a7..c7aea91a 100644
--- a/src/shardus/index.ts
+++ b/src/shardus/index.ts
@@ -1,7 +1,7 @@
 import { NodeStatus } from '@shardus/types/build/src/p2p/P2PTypes'
 import { EventEmitter } from 'events'
 import { Handler } from 'express'
-import {inspect} from 'util'
+import { inspect } from 'util'
 import Log4js from 'log4js'
 import path from 'path'
 import SHARDUS_CONFIG from '../config'
@@ -53,7 +53,7 @@ Context.setDefaultConfigs(defaultConfigs)
 type RouteHandlerRegister = (route: string, authHandler: Handler, responseHandler?: Handler) => void
 
 //todo make this a config parameter set by the dapp
-const changeListGlobalAccount = '0'.repeat(64)
+const changeListGlobalAccount = defaultConfigs.server.globalAccount
 
 interface Shardus {
   io: SocketIO.Server
@@ -2060,6 +2060,7 @@ class Shardus extends EventEmitter {
 
   async updateConfigChangeQueue(lastCycle: ShardusTypes.Cycle) {
     if (lastCycle == null) return
+    const changeListGlobalAccount = this.config.globalAccount
     let accounts = await this.app.getAccountDataByList([changeListGlobalAccount])
     if (accounts != null && accounts.length === 1) {
       let account = accounts[0]
diff --git a/src/shardus/shardus-types.ts b/src/shardus/shardus-types.ts
index f9739edc..67b35f13 100644
--- a/src/shardus/shardus-types.ts
+++ b/src/shardus/shardus-types.ts
@@ -550,6 +550,8 @@ export interface ServerConfiguration {
   baseDir?: string
   /** The transactionExpireTime parameter is an Integer that defines the amount of time (in seconds) allowed to pass before a transaction will expire and be rejected by the network. */
   transactionExpireTime?: number
+  /** The changeListGlobalAccount sets the global network account value for the validator and thereby the whole network */
+  globalAccount: string
   /** Crypto module configuration */
   crypto?: {
     /** The hashkey parameter is a String that is used to initialize the crypto module, which is used for the cryptographic functions within shardus */
